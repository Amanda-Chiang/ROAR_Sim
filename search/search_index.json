{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ROAR Autonomous Racing Project For more information regarding DeCal Course visit roardecal . Getting Started We use Carla which is an open-source simulator for autonomous driving research as our main demonstration of autonomous racing during COVID-19. If you are new to the project visit GetingStarted If you are curious about ROAR Competition at Berkeley visit BerkeleyROAR If you are curious about Carla visit CarlaSimulator","title":"Home"},{"location":"#welcome-to-roar-autonomous-racing-project","text":"For more information regarding DeCal Course visit roardecal .","title":"Welcome to ROAR Autonomous Racing Project"},{"location":"#getting-started","text":"We use Carla which is an open-source simulator for autonomous driving research as our main demonstration of autonomous racing during COVID-19. If you are new to the project visit GetingStarted If you are curious about ROAR Competition at Berkeley visit BerkeleyROAR If you are curious about Carla visit CarlaSimulator","title":"Getting Started"},{"location":"Gettingstarted/startcarla/","text":"ROAR Carla Simulation QuickStart Required Equipment: Linux/Windows Computer Approximate Time: 15 minutes Download the this code here [as of writing this readme, we still need to create a public github repo] Download the right distribution of Carla for your Operation System here You should download either roar_easy_linux.zip or roar_easy_windows.zip Initiate a virtual environment. conda create -n ROAR python=3.7 conda activate ROAR Install required packages pip install -r requirements.txt You are all set up. Start the server on Windows, you may double click the CarlaUE4.exe or you may use a commandline prompt and type in CarlaUE4.exe on Ubuntu, you can directly type ./CarlaUE4.sh Start Client connection python carla_runner.py You should be on manual control now. To switch to autonomous mode, open up carla_runner.py and scroll down the end, change the line `settings.enable_aut Common Errors Conda not found You should download miniconda3 Linux/Windows 64-bit miniconda3 Follow the below instructions to install miniconda successfully If still cannot call conda, try (directory may vary): sudo chown -R /home/username/miniconda3/' sudo chmod -R +x /home/username/miniconda3/","title":"Setup"},{"location":"Gettingstarted/startcarla/#roar-carla-simulation","text":"","title":"ROAR Carla Simulation"},{"location":"Gettingstarted/startcarla/#quickstart","text":"Required Equipment: Linux/Windows Computer Approximate Time: 15 minutes Download the this code here [as of writing this readme, we still need to create a public github repo] Download the right distribution of Carla for your Operation System here You should download either roar_easy_linux.zip or roar_easy_windows.zip Initiate a virtual environment. conda create -n ROAR python=3.7 conda activate ROAR Install required packages pip install -r requirements.txt You are all set up. Start the server on Windows, you may double click the CarlaUE4.exe or you may use a commandline prompt and type in CarlaUE4.exe on Ubuntu, you can directly type ./CarlaUE4.sh Start Client connection python carla_runner.py You should be on manual control now. To switch to autonomous mode, open up carla_runner.py and scroll down the end, change the line `settings.enable_aut","title":"QuickStart"},{"location":"Gettingstarted/startcarla/#common-errors","text":"Conda not found You should download miniconda3 Linux/Windows 64-bit miniconda3 Follow the below instructions to install miniconda successfully If still cannot call conda, try (directory may vary): sudo chown -R /home/username/miniconda3/' sudo chmod -R +x /home/username/miniconda3/","title":"Common Errors"},{"location":"layout/projectlayout/","text":"Overview of ROAR Project layout ROAR Carla Overall Architecture Environment Maps Environmental Perception Motion Planning Simulation Vehicle Controller ROAR-Decal Folder ROAR-Decal bridges ( Sync Data from source to carla ) carla_client util roar_autonomous_system agent_module control_module perception_module planning_module utilities_module visualization_module utils readme.md requirements.txt runner.py","title":"Overview of Project Layout"},{"location":"layout/projectlayout/#overview-of-roar-project-layout","text":"","title":"Overview of ROAR Project layout"},{"location":"layout/projectlayout/#roar-carla-overall-architecture","text":"","title":"ROAR Carla Overall Architecture"},{"location":"layout/projectlayout/#environment-maps","text":"","title":"Environment Maps"},{"location":"layout/projectlayout/#environmental-perception","text":"","title":"Environmental Perception"},{"location":"layout/projectlayout/#motion-planning","text":"","title":"Motion Planning"},{"location":"layout/projectlayout/#simulation","text":"","title":"Simulation"},{"location":"layout/projectlayout/#vehicle-controller","text":"","title":"Vehicle Controller"},{"location":"layout/projectlayout/#roar-decal-folder","text":"ROAR-Decal bridges ( Sync Data from source to carla ) carla_client util roar_autonomous_system agent_module control_module perception_module planning_module utilities_module visualization_module utils readme.md requirements.txt runner.py","title":"ROAR-Decal Folder"},{"location":"lectures_folder/3DPrint/","text":"3D Printing","title":"3D Printing"},{"location":"lectures_folder/A%26JN/","text":"Arduino Lecture PPT Jetson Nano PPt","title":"Arduino/Jetson Nano"},{"location":"lectures_folder/CV/","text":"Localization PPT","title":"Computer Vision"},{"location":"lectures_folder/PID/","text":"Virtual Reality Racing","title":"PID Control"}]}